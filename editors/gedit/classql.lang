<?xml version="1.0" encoding="UTF-8"?>
<language id="classql" _name="ClassQL" version="2.0" _section="Sources">
	<metadata>
		<property name="mimetypes">text/x-classql</property>
		<property name="globs">*.cql</property>
        <property name="block-comment-start">/*</property>
        <property name="block-comment-end">*/</property>
	</metadata>
	
	<styles>
        <style id="comment" _name="Comment" map-to="def:comment"/>
        <style id="error" _name="Error" map-to="def:error"/>
        <style id="variable" _name="Variable" map-to="def:identifier"/>
        <style id="attribute" _name="Attribute" map-to="def:type"/>
        <style id="string" _name="String" map-to="def:string"/>
        <style id="keyword" _name="Keyword" map-to="def:keyword"/>
        <style id="null-value" _name="Null Value" map-to="def:special-constant"/>
        <style id="identifier" _name="Identifier"/>
        <style id="type" _name="Data Type" map-to="def:type"/>
        <style id="escape" _name="Escaped Character" map-to="def:special-char"/>
        <style id="operator" _name="Operator" map-to="def:operator"/>
	</styles>
	
	<definitions>

        <context id="escape" style-ref="escape">
          <match>\\((\\|"|n|t|\$|r)|[0-7]{1,3}|x[0-9a-fA-F]{1,2})</match>
        </context>

        <context id="cpp-line-comment" style-ref="comment" end-at-line-end="true" extend-parent="false" class="comment" class-disabled="no-spell-check">
          <start>//</start>
          <include>
            <context ref="def:in-line-comment"/>
          </include>
        </context>

        <context id="c-block-comment" style-ref="comment" class="comment" class-disabled="no-spell-check">
          <start>/\*</start>
          <end>\*/</end>
          <include>
            <context ref="def:in-line-comment"/>
          </include>
        </context>

        <context id="close-comment-outside-comment" style-ref="error">
          <match>\*/(?!\*)</match>
        </context>

        <context id="variable" style-ref="variable">
          <match>[$]+[a-zA-Z_][a-zA-Z0-9_]*(\[[a-zA-Z0-9_]+\])*</match>
        </context>

        <context id="attribute" style-ref="attribute">
          <match>@[a-zA-Z0-9_\\]+(::[a-zA-Z0-9_]+)?</match>
        </context>

        <context id="array-operators" style-ref="type">
          <match>(\[|\])</match>
        </context>

        <context id="double-quoted-string" style-ref="string" class="string" class-disabled="no-spell-check">
          <start>"</start>
          <end>"</end>
          <include>
            <context ref="escape"/>
            <context ref="def:line-continue"/>
          </include>
        </context>

        <context id="single-quoted-string" style-ref="string" class="string" class-disabled="no-spell-check">
          <start>'</start>
          <end>'</end>
          <include>
            <context style-ref="def:special-char">
              <match>\\['\\]</match>
            </context>
            <context ref="def:line-continue"/>
          </include>
        </context>

        <context id="identifier" style-ref="identifier">
          <match>[a-zA-Z_][a-zA-Z0-9_]*</match>
        </context>

        <context id="operators" style-ref="operator" extend-parent="false">
          <match>(->|::)</match>
        </context>

        <context id="keywords" style-ref="keyword">
          <keyword>abstract</keyword>
          <keyword>represents</keyword>
          <keyword>returns</keyword>
          <keyword>catch</keyword>
          <keyword>namespace</keyword>
          <keyword>extends</keyword>
          <keyword>implements</keyword>
          <keyword>use</keyword>
          <keyword>static</keyword>
        </context>

        <context id="type" style-ref="type">
          <keyword>value</keyword>
          <keyword>update</keyword>
          <keyword>null</keyword>
          <keyword>self</keyword>
          <keyword>last_insert_id</keyword>
        </context>

        <context id="function">
          <start>\{</start>
          <end>\}</end>
          <include>
            <context ref="variable"/>
            <context ref="attribute"/>
            <context ref="sql:sql"/>
          </include>
        </context>

        <context id="variable-def">
          <start>=</start>
          <end>;</end>
          <include>
            <context ref="variable"/>
            <context ref="attribute"/>
            <context ref="sql:sql"/>
          </include>
        </context>

        <context id="args">
          <start>\(</start>
          <end>\)</end>
          <include>
            <context ref="variable"/>
            <context ref="double-quoted-string"/>
            <context ref="single-quoted-string"/>
            <context ref="array-operators"/>
            <context ref="cpp-line-comment"/>
            <context ref="c-block-comment"/>
          </include>
        </context>

        <context id="class">
          <start>\{</start>
          <end>\}</end>
          <include>
            <context ref="cpp-line-comment"/>
            <context ref="c-block-comment"/>
            <context ref="double-quoted-string"/>
            <context ref="single-quoted-string"/>
            <context ref="variable"/>
            <context ref="array-operators"/>
            <context ref="keywords"/>
            <context ref="type"/>
            <context ref="identifier"/>
            <context ref="function"/>
            <context ref="operators"/>
            <context ref="variable-def"/>
            <context ref="attribute"/>
            <context ref="args"/>
          </include>
        </context>
        
        <context id="classql" class="no-spell-check">
          <include>
                <context ref="cpp-line-comment"/>
                <context ref="c-block-comment"/>
	            <context ref="class"/>
                <context ref="attribute"/>
                <context ref="keywords"/>
          </include>
        </context>
	
	</definitions>
	
</language>
