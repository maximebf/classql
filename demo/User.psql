
namespace Models;

abstract User {
    
    id int;
    email text;
    password text;
    firstName text;
    lastName text;
    created timestamp;
    
    fullName { $this.firstName || ' ' || $this.lastName }
    selectColumns { $this.id, $this.email, $fullName }
    SELECT { SELECT $selectColumns }
    
    static findAll() {
        $SELECT FROM $this
    }

    static findById($id) {
        $SELECT FROM $this WHERE $this.id = $id
    }

    @Composite(Message)
    static findByIdWithMessages($id) {
        $SELECT, message FROM $this JOIN messages m ON m.user_id = $this.id WHERE $this.id = $id
    }
    
    @SingleValue
    static count() {
        SELECT COUNT(*) FROM $this
    }
    
    static create($data) {
        INSERT INTO $this (email, password, firstName, lastName, created)
            VALUES ($data[email], $data[password], $data[firstName], $data[lastName], NOW())
    }
    
    findMessages() -> Message::findAllByUser($id)
    addMessage($message) -> Message::create($id, $message)
}

Member as members extends User {
    role int;
    roles [ member => 1, admin => 2 ]
    
    becomeAdmin() returns Admin {
        UPDATE $this SET role = $roles[member] RETURNING $selectColumns
    }
}

virtual Admin extends Member {

}

